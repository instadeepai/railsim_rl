# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import railsim_pb2 as railsim__pb2


class RailsimConnecterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getAction = channel.unary_unary(
                '/RailsimConnecter/getAction',
                request_serializer=railsim__pb2.ObservationMap.SerializeToString,
                response_deserializer=railsim__pb2.ActionMap.FromString,
                )
        self.updateState = channel.unary_unary(
                '/RailsimConnecter/updateState',
                request_serializer=railsim__pb2.ObservationMap.SerializeToString,
                response_deserializer=railsim__pb2.ConfirmationResponse.FromString,
                )


class RailsimConnecterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getAction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RailsimConnecterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getAction': grpc.unary_unary_rpc_method_handler(
                    servicer.getAction,
                    request_deserializer=railsim__pb2.ObservationMap.FromString,
                    response_serializer=railsim__pb2.ActionMap.SerializeToString,
            ),
            'updateState': grpc.unary_unary_rpc_method_handler(
                    servicer.updateState,
                    request_deserializer=railsim__pb2.ObservationMap.FromString,
                    response_serializer=railsim__pb2.ConfirmationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RailsimConnecter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RailsimConnecter(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RailsimConnecter/getAction',
            railsim__pb2.ObservationMap.SerializeToString,
            railsim__pb2.ActionMap.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RailsimConnecter/updateState',
            railsim__pb2.ObservationMap.SerializeToString,
            railsim__pb2.ConfirmationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
